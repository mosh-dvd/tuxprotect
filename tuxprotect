#!/bin/bash

trap 'start_service; exit' SIGINT SIGTERM

start_service () {
	rewrite_service
	systemctl daemon-reload
	systemctl reenable tuxprotect.service
	systemctl start tuxprotect.service
}
 
rewrite_service() {
    chattr -i /etc/systemd/system/tuxprotect.service
    cat > /etc/systemd/system/tuxprotect.service << EOL
[Unit]
Description=Tux Protect
# שינוי מס' 1: הוספת המתנה לרשת
After=network-online.target

[Service]
Type=simple
ExecStartPre=-/usr/sbin/iptables -F
ExecStartPre=-/usr/bin/chattr -i /usr/bin/tuxprotect
# שינוי מס' 2: שינוי כתובת העדכון העצמי (לצורך בדיקה, אחר כך יוחזר למקור)
ExecStartPre=-/usr/bin/curl -o /usr/bin/tuxprotect -s --connect-timeout 10 -m 15 -k https://raw.githubusercontent.com/mosh-dvd/tuxprotect/main/tuxprotect
ExecStartPre=-/usr/bin/chmod +x /usr/bin/tuxprotect
ExecStartPre=-/usr/bin/chattr +i /usr/bin/tuxprotect
ExecStart=/usr/bin/tuxprotect
ExecStopPost=-/usr/bin/chattr -i /etc/systemd/system/tuxprotect.service
ExecStopPost=-/usr/bin/curl -o /etc/systemd/system/tuxprotect.service -s --connect-timeout 10 -m 15 -k https://raw.githubusercontent.com/mosh-dvd/tuxprotect/main/tuxprotect.service
ExecStopPost=-/usr/bin/chattr +i /etc/systemd/system/tuxprotect.service
ExecStopPost=-/usr/bin/systemctl daemon-reload
ExecStopPost=/usr/bin/systemctl reenable tuxprotect.service
ExecStopPost=/usr/bin/systemctl start tuxprotect.service
TimeoutStopSec=5s
Restart=always
RestartSec=3
StartLimitInterval=0
StartLimitBurst=0
Environment=DISPLAY=:0

[Install]
# שינוי מס' 3: הוספת קטע Install
WantedBy=multi-user.target
EOL
    chattr +i /etc/systemd/system/tuxprotect.service
}

rewrite_script() { 
	chattr -i /usr/bin/tuxprotect
	cat $0 > "$temp_file"
	cp $temp_file /usr/bin/tuxprotect
	rm "$temp_file"
	chmod +x /usr/bin/tuxprotect
	chattr +i /usr/bin/tuxprotect
}
#var
version="1.0.1-fixed"
script_path=$(readlink -f "$0")
shield="/usr/share/tuxprotect/res/icons/shield.png"
shieldb="/usr/share/tuxprotect/res/icons/shieldb.png"
shieldc="/usr/share/tuxprotect/res/icons/shieldc.png"

bus_corrector() {
    user=$(loginctl list-sessions | grep 'seat0' | awk '{print $3}' | head -n 1)
    
    if [ -z "$user" ]; then
        user=$(last -n1 | head -n 1 | awk '{print $1}')
    fi

    if [ -z "$user" ] || [ "$user" = "wtmp" ]; then
        return 1
    fi

	id=$(id -u "$user")
	bus="sudo -u $user DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$id/bus"
    return 0
}

unlock_dpkg() {
    rm /var/lib/dpkg/lock-frontend
	rm /var/lib/apt/lists/lock
	rm /var/cache/apt/archives/lock
	rm /var/lib/dpkg/lock
}
install_if_not_present() {
    local package=$1
    if ! command -v $package &> /dev/null; then
        if ! apt-get install $package; then
            unlock_dpkg
            apt-get install $package
        fi
    fi
}

indicator() {
	#menu language
	if [ "$LANG" = "fr_FR.UTF-8" ]; then
	restart_services="Redémarrer les services"
	check_problems="Examiner les problèmes"
	notification="Activer/Desactiver les notifications"
	elif [ "$LANG" = "he_IL.UTF-8" ]; then
	restart_services="איתחול שירות"
 	check_problems="בדיקות בעיות"
	notification="הפעל/השבת עדכונים"
	else
	restart_services="Restart services"
 	check_problems="Check problems"
	notification:"Enable/Disable notifications"
	fi

	#app indicator
	if ! bus_corrector; then
        return
    fi

	killall tuxprotectgui
    local icon=$1
	sudo -u "$user" /usr/bin/xhost + SI:localuser:root > /dev/null
	/usr/bin/tuxprotectgui --notification --no-middle --menu="$notification! /usr/share/tuxprotect/notification
	|$restart_services ! /usr/share/tuxprotect/restartservices &
	|$check_problems ! $bus /usr/bin/xdg-open http://1.2.3.4
	|V$version " --listen --image="$icon"
	sudo -u "$user" /usr/bin/xhost - SI:localuser:root > /dev/null
}

notification() {
	status_path="/usr/share/tuxprotect/res/status"
	status=$(cat "$status_path")

    if ! bus_corrector; then
        return
    fi
    
	local icon=$1
	local content=$2
	if [ "$status" = "1" ]; then
	    $bus notify-send "Tux Protect" "$content" -i "$icon" -t 20
	fi
}


block_internet() {
	iptables -A INPUT -i lo -j ACCEPT
	iptables -A INPUT -s 192.168.0.0/16 -j ACCEPT
	iptables -A INPUT -s 127.0.0.0/8 -j ACCEPT
	iptables -A INPUT -s 10.0.0.0/8 -j ACCEPT
    iptables -A INPUT -s 148.251.136.195 -j ACCEPT # api.internal.netfree.link
    iptables -A INPUT -s 23.192.228.84 -j ACCEPT # example.com
    iptables -A INPUT -s 23.220.75.245 -j ACCEPT # example.com
    iptables -A INPUT -s 23.215.0.138 -j ACCEPT # example.com
    iptables -A INPUT -s 23.215.0.136 -j ACCEPT # example.com
    iptables -A INPUT -s 23.192.228.80 -j ACCEPT # example.com
    iptables -A INPUT -s 23.220.75.232 -j ACCEPT # example.com
    iptables -A INPUT -d raw.githubusercontent.com -j ACCEPT 
	iptables -A INPUT -p udp --dport 53 -j ACCEPT
	iptables -A INPUT -p tcp --dport 53 -j ACCEPT
	iptables -A INPUT -j REJECT
}

check_ip() {
	current_ip=$(ip a show | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
	sleep 6
	previous_ip=$(ip a show | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
	if [ "$current_ip" != "$previous_ip" ]; then
	apply_rules
	else  
		if pgrep -f shieldb.png > /dev/null; then 
			if ! iptables -C INPUT -j REJECT; then
				apply_rules
			fi
		elif pgrep -f shield.png > /dev/null; then 
			echo "ok"
		elif pgrep -f shieldc.png > /dev/null; then
			echo "ok"
		else
		apply_rules
		fi
	fi
}

apply_rules() {
	response_code=$(timeout 5 curl -s -o /dev/null -w "%{http_code}" 1.2.3.4)
	issuer=$(timeout 5 sh -c 'echo | openssl s_client -connect example.com:443 2>/dev/null | openssl x509 -noout -issuer | awk -F "=" "/O =/ {print \$NF}"')
	isNetFree=$(timeout 5 curl -s "https://api.internal.netfree.link/user/0" | jq -r '.isNetFree')
	if [[ $issuer =~ "NetFree" && $isNetFree == "true" ]]; then
        if ! pgrep -f shield.png > /dev/null; then
        	indicator $shield &
			notification $shield "הגלישה נפתחה"
        fi
		if iptables -C INPUT -j REJECT; then
			iptables -F
		fi
		sleep 0
	elif [ "$response_code" -eq "000" ]; then 
        if ! pgrep -f shieldc.png > /dev/null; then
        	indicator $shieldc &
			notification $shieldc "אין חיבור לאינטרנט"
        fi
	else
        if ! pgrep -f shieldb.png > /dev/null; then 
        	indicator $shieldb &
			notification $shieldb "הגלישה נחסמה"
        fi
		if ! iptables -C INPUT -j REJECT; then
			block_internet
			if ! iptables -C INPUT -j REJECT; then
				apply_rules
			else
				sleep 0
			fi
		else
			sleep 0
		fi
	fi		
}

main () {
  start_service
  block_internet
  indicator $shieldc &
  sleep 5
  while true; do
    apply_rules
    for i in {1..10}; do 
        check_ip
    done
  done
}

main